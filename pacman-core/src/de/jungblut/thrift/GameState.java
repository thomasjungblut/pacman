/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.jungblut.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class GameState implements org.apache.thrift.TBase<GameState, GameState._Fields>, java.io.Serializable, Cloneable, Comparable<GameState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GameState");

  private static final org.apache.thrift.protocol.TField BOARD_FIELD_DESC = new org.apache.thrift.protocol.TField("board", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PACMAN_START_FIELD_DESC = new org.apache.thrift.protocol.TField("pacmanStart", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField GHOST_START_FIELD_DESC = new org.apache.thrift.protocol.TField("ghostStart", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField GHOST_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("ghostIndex", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GameStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GameStateTupleSchemeFactory());
  }

  public List<List<Byte>> board; // required
  public Point pacmanStart; // required
  public List<Point> ghostStart; // required
  public int ghostIndex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOARD((short)1, "board"),
    PACMAN_START((short)2, "pacmanStart"),
    GHOST_START((short)3, "ghostStart"),
    GHOST_INDEX((short)4, "ghostIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOARD
          return BOARD;
        case 2: // PACMAN_START
          return PACMAN_START;
        case 3: // GHOST_START
          return GHOST_START;
        case 4: // GHOST_INDEX
          return GHOST_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GHOSTINDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOARD, new org.apache.thrift.meta_data.FieldMetaData("board", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)))));
    tmpMap.put(_Fields.PACMAN_START, new org.apache.thrift.meta_data.FieldMetaData("pacmanStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class)));
    tmpMap.put(_Fields.GHOST_START, new org.apache.thrift.meta_data.FieldMetaData("ghostStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class))));
    tmpMap.put(_Fields.GHOST_INDEX, new org.apache.thrift.meta_data.FieldMetaData("ghostIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GameState.class, metaDataMap);
  }

  public GameState() {
  }

  public GameState(
    List<List<Byte>> board,
    Point pacmanStart,
    List<Point> ghostStart,
    int ghostIndex)
  {
    this();
    this.board = board;
    this.pacmanStart = pacmanStart;
    this.ghostStart = ghostStart;
    this.ghostIndex = ghostIndex;
    setGhostIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GameState(GameState other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBoard()) {
      List<List<Byte>> __this__board = new ArrayList<List<Byte>>(other.board.size());
      for (List<Byte> other_element : other.board) {
        List<Byte> __this__board_copy = new ArrayList<Byte>(other_element);
        __this__board.add(__this__board_copy);
      }
      this.board = __this__board;
    }
    if (other.isSetPacmanStart()) {
      this.pacmanStart = new Point(other.pacmanStart);
    }
    if (other.isSetGhostStart()) {
      List<Point> __this__ghostStart = new ArrayList<Point>(other.ghostStart.size());
      for (Point other_element : other.ghostStart) {
        __this__ghostStart.add(new Point(other_element));
      }
      this.ghostStart = __this__ghostStart;
    }
    this.ghostIndex = other.ghostIndex;
  }

  public GameState deepCopy() {
    return new GameState(this);
  }

  @Override
  public void clear() {
    this.board = null;
    this.pacmanStart = null;
    this.ghostStart = null;
    setGhostIndexIsSet(false);
    this.ghostIndex = 0;
  }

  public int getBoardSize() {
    return (this.board == null) ? 0 : this.board.size();
  }

  public java.util.Iterator<List<Byte>> getBoardIterator() {
    return (this.board == null) ? null : this.board.iterator();
  }

  public void addToBoard(List<Byte> elem) {
    if (this.board == null) {
      this.board = new ArrayList<List<Byte>>();
    }
    this.board.add(elem);
  }

  public List<List<Byte>> getBoard() {
    return this.board;
  }

  public GameState setBoard(List<List<Byte>> board) {
    this.board = board;
    return this;
  }

  public void unsetBoard() {
    this.board = null;
  }

  /** Returns true if field board is set (has been assigned a value) and false otherwise */
  public boolean isSetBoard() {
    return this.board != null;
  }

  public void setBoardIsSet(boolean value) {
    if (!value) {
      this.board = null;
    }
  }

  public Point getPacmanStart() {
    return this.pacmanStart;
  }

  public GameState setPacmanStart(Point pacmanStart) {
    this.pacmanStart = pacmanStart;
    return this;
  }

  public void unsetPacmanStart() {
    this.pacmanStart = null;
  }

  /** Returns true if field pacmanStart is set (has been assigned a value) and false otherwise */
  public boolean isSetPacmanStart() {
    return this.pacmanStart != null;
  }

  public void setPacmanStartIsSet(boolean value) {
    if (!value) {
      this.pacmanStart = null;
    }
  }

  public int getGhostStartSize() {
    return (this.ghostStart == null) ? 0 : this.ghostStart.size();
  }

  public java.util.Iterator<Point> getGhostStartIterator() {
    return (this.ghostStart == null) ? null : this.ghostStart.iterator();
  }

  public void addToGhostStart(Point elem) {
    if (this.ghostStart == null) {
      this.ghostStart = new ArrayList<Point>();
    }
    this.ghostStart.add(elem);
  }

  public List<Point> getGhostStart() {
    return this.ghostStart;
  }

  public GameState setGhostStart(List<Point> ghostStart) {
    this.ghostStart = ghostStart;
    return this;
  }

  public void unsetGhostStart() {
    this.ghostStart = null;
  }

  /** Returns true if field ghostStart is set (has been assigned a value) and false otherwise */
  public boolean isSetGhostStart() {
    return this.ghostStart != null;
  }

  public void setGhostStartIsSet(boolean value) {
    if (!value) {
      this.ghostStart = null;
    }
  }

  public int getGhostIndex() {
    return this.ghostIndex;
  }

  public GameState setGhostIndex(int ghostIndex) {
    this.ghostIndex = ghostIndex;
    setGhostIndexIsSet(true);
    return this;
  }

  public void unsetGhostIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GHOSTINDEX_ISSET_ID);
  }

  /** Returns true if field ghostIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetGhostIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __GHOSTINDEX_ISSET_ID);
  }

  public void setGhostIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GHOSTINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOARD:
      if (value == null) {
        unsetBoard();
      } else {
        setBoard((List<List<Byte>>)value);
      }
      break;

    case PACMAN_START:
      if (value == null) {
        unsetPacmanStart();
      } else {
        setPacmanStart((Point)value);
      }
      break;

    case GHOST_START:
      if (value == null) {
        unsetGhostStart();
      } else {
        setGhostStart((List<Point>)value);
      }
      break;

    case GHOST_INDEX:
      if (value == null) {
        unsetGhostIndex();
      } else {
        setGhostIndex((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOARD:
      return getBoard();

    case PACMAN_START:
      return getPacmanStart();

    case GHOST_START:
      return getGhostStart();

    case GHOST_INDEX:
      return Integer.valueOf(getGhostIndex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOARD:
      return isSetBoard();
    case PACMAN_START:
      return isSetPacmanStart();
    case GHOST_START:
      return isSetGhostStart();
    case GHOST_INDEX:
      return isSetGhostIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GameState)
      return this.equals((GameState)that);
    return false;
  }

  public boolean equals(GameState that) {
    if (that == null)
      return false;

    boolean this_present_board = true && this.isSetBoard();
    boolean that_present_board = true && that.isSetBoard();
    if (this_present_board || that_present_board) {
      if (!(this_present_board && that_present_board))
        return false;
      if (!this.board.equals(that.board))
        return false;
    }

    boolean this_present_pacmanStart = true && this.isSetPacmanStart();
    boolean that_present_pacmanStart = true && that.isSetPacmanStart();
    if (this_present_pacmanStart || that_present_pacmanStart) {
      if (!(this_present_pacmanStart && that_present_pacmanStart))
        return false;
      if (!this.pacmanStart.equals(that.pacmanStart))
        return false;
    }

    boolean this_present_ghostStart = true && this.isSetGhostStart();
    boolean that_present_ghostStart = true && that.isSetGhostStart();
    if (this_present_ghostStart || that_present_ghostStart) {
      if (!(this_present_ghostStart && that_present_ghostStart))
        return false;
      if (!this.ghostStart.equals(that.ghostStart))
        return false;
    }

    boolean this_present_ghostIndex = true;
    boolean that_present_ghostIndex = true;
    if (this_present_ghostIndex || that_present_ghostIndex) {
      if (!(this_present_ghostIndex && that_present_ghostIndex))
        return false;
      if (this.ghostIndex != that.ghostIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GameState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBoard()).compareTo(other.isSetBoard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.board, other.board);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPacmanStart()).compareTo(other.isSetPacmanStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacmanStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pacmanStart, other.pacmanStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGhostStart()).compareTo(other.isSetGhostStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGhostStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ghostStart, other.ghostStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGhostIndex()).compareTo(other.isSetGhostIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGhostIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ghostIndex, other.ghostIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GameState(");
    boolean first = true;

    sb.append("board:");
    if (this.board == null) {
      sb.append("null");
    } else {
      sb.append(this.board);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pacmanStart:");
    if (this.pacmanStart == null) {
      sb.append("null");
    } else {
      sb.append(this.pacmanStart);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ghostStart:");
    if (this.ghostStart == null) {
      sb.append("null");
    } else {
      sb.append(this.ghostStart);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ghostIndex:");
    sb.append(this.ghostIndex);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pacmanStart != null) {
      pacmanStart.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GameStateStandardSchemeFactory implements SchemeFactory {
    public GameStateStandardScheme getScheme() {
      return new GameStateStandardScheme();
    }
  }

  private static class GameStateStandardScheme extends StandardScheme<GameState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GameState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOARD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.board = new ArrayList<List<Byte>>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  List<Byte> _elem2;
                  {
                    org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                    _elem2 = new ArrayList<Byte>(_list3.size);
                    for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                    {
                      byte _elem5;
                      _elem5 = iprot.readByte();
                      _elem2.add(_elem5);
                    }
                    iprot.readListEnd();
                  }
                  struct.board.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setBoardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PACMAN_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pacmanStart = new Point();
              struct.pacmanStart.read(iprot);
              struct.setPacmanStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GHOST_START
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.ghostStart = new ArrayList<Point>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  Point _elem8;
                  _elem8 = new Point();
                  _elem8.read(iprot);
                  struct.ghostStart.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setGhostStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GHOST_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ghostIndex = iprot.readI32();
              struct.setGhostIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GameState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.board != null) {
        oprot.writeFieldBegin(BOARD_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.board.size()));
          for (List<Byte> _iter9 : struct.board)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, _iter9.size()));
              for (byte _iter10 : _iter9)
              {
                oprot.writeByte(_iter10);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.pacmanStart != null) {
        oprot.writeFieldBegin(PACMAN_START_FIELD_DESC);
        struct.pacmanStart.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ghostStart != null) {
        oprot.writeFieldBegin(GHOST_START_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ghostStart.size()));
          for (Point _iter11 : struct.ghostStart)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GHOST_INDEX_FIELD_DESC);
      oprot.writeI32(struct.ghostIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GameStateTupleSchemeFactory implements SchemeFactory {
    public GameStateTupleScheme getScheme() {
      return new GameStateTupleScheme();
    }
  }

  private static class GameStateTupleScheme extends TupleScheme<GameState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GameState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBoard()) {
        optionals.set(0);
      }
      if (struct.isSetPacmanStart()) {
        optionals.set(1);
      }
      if (struct.isSetGhostStart()) {
        optionals.set(2);
      }
      if (struct.isSetGhostIndex()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBoard()) {
        {
          oprot.writeI32(struct.board.size());
          for (List<Byte> _iter12 : struct.board)
          {
            {
              oprot.writeI32(_iter12.size());
              for (byte _iter13 : _iter12)
              {
                oprot.writeByte(_iter13);
              }
            }
          }
        }
      }
      if (struct.isSetPacmanStart()) {
        struct.pacmanStart.write(oprot);
      }
      if (struct.isSetGhostStart()) {
        {
          oprot.writeI32(struct.ghostStart.size());
          for (Point _iter14 : struct.ghostStart)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetGhostIndex()) {
        oprot.writeI32(struct.ghostIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GameState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.board = new ArrayList<List<Byte>>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            List<Byte> _elem17;
            {
              org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
              _elem17 = new ArrayList<Byte>(_list18.size);
              for (int _i19 = 0; _i19 < _list18.size; ++_i19)
              {
                byte _elem20;
                _elem20 = iprot.readByte();
                _elem17.add(_elem20);
              }
            }
            struct.board.add(_elem17);
          }
        }
        struct.setBoardIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pacmanStart = new Point();
        struct.pacmanStart.read(iprot);
        struct.setPacmanStartIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ghostStart = new ArrayList<Point>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            Point _elem23;
            _elem23 = new Point();
            _elem23.read(iprot);
            struct.ghostStart.add(_elem23);
          }
        }
        struct.setGhostStartIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ghostIndex = iprot.readI32();
        struct.setGhostIndexIsSet(true);
      }
    }
  }

}

