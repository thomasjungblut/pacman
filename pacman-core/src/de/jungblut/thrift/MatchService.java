/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.jungblut.thrift;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MatchService {

  public interface Iface {

    /**
     * Queues for a game, gives a queuing token to identify the request.
     */
    public String queueForGame() throws org.apache.thrift.TException;

    /**
     * Polling method to await a game successfully finished a setup, given a request token.
     * 
     * @param requestToken
     */
    public Match pollGameSetupCompleted(String requestToken) throws org.apache.thrift.TException;

    public GameState getInitialGameState(String sessionToken, String clientIdentifier) throws org.apache.thrift.TException;

    public void awaitStart(String sessionToken, String clientIdentifier) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queueForGame(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pollGameSetupCompleted(String requestToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getInitialGameState(String sessionToken, String clientIdentifier, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void awaitStart(String sessionToken, String clientIdentifier, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String queueForGame() throws org.apache.thrift.TException
    {
      send_queueForGame();
      return recv_queueForGame();
    }

    public void send_queueForGame() throws org.apache.thrift.TException
    {
      queueForGame_args args = new queueForGame_args();
      sendBase("queueForGame", args);
    }

    public String recv_queueForGame() throws org.apache.thrift.TException
    {
      queueForGame_result result = new queueForGame_result();
      receiveBase(result, "queueForGame");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queueForGame failed: unknown result");
    }

    public Match pollGameSetupCompleted(String requestToken) throws org.apache.thrift.TException
    {
      send_pollGameSetupCompleted(requestToken);
      return recv_pollGameSetupCompleted();
    }

    public void send_pollGameSetupCompleted(String requestToken) throws org.apache.thrift.TException
    {
      pollGameSetupCompleted_args args = new pollGameSetupCompleted_args();
      args.setRequestToken(requestToken);
      sendBase("pollGameSetupCompleted", args);
    }

    public Match recv_pollGameSetupCompleted() throws org.apache.thrift.TException
    {
      pollGameSetupCompleted_result result = new pollGameSetupCompleted_result();
      receiveBase(result, "pollGameSetupCompleted");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pollGameSetupCompleted failed: unknown result");
    }

    public GameState getInitialGameState(String sessionToken, String clientIdentifier) throws org.apache.thrift.TException
    {
      send_getInitialGameState(sessionToken, clientIdentifier);
      return recv_getInitialGameState();
    }

    public void send_getInitialGameState(String sessionToken, String clientIdentifier) throws org.apache.thrift.TException
    {
      getInitialGameState_args args = new getInitialGameState_args();
      args.setSessionToken(sessionToken);
      args.setClientIdentifier(clientIdentifier);
      sendBase("getInitialGameState", args);
    }

    public GameState recv_getInitialGameState() throws org.apache.thrift.TException
    {
      getInitialGameState_result result = new getInitialGameState_result();
      receiveBase(result, "getInitialGameState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInitialGameState failed: unknown result");
    }

    public void awaitStart(String sessionToken, String clientIdentifier) throws org.apache.thrift.TException
    {
      send_awaitStart(sessionToken, clientIdentifier);
      recv_awaitStart();
    }

    public void send_awaitStart(String sessionToken, String clientIdentifier) throws org.apache.thrift.TException
    {
      awaitStart_args args = new awaitStart_args();
      args.setSessionToken(sessionToken);
      args.setClientIdentifier(clientIdentifier);
      sendBase("awaitStart", args);
    }

    public void recv_awaitStart() throws org.apache.thrift.TException
    {
      awaitStart_result result = new awaitStart_result();
      receiveBase(result, "awaitStart");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queueForGame(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queueForGame_call method_call = new queueForGame_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queueForGame_call extends org.apache.thrift.async.TAsyncMethodCall {
      public queueForGame_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queueForGame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queueForGame_args args = new queueForGame_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queueForGame();
      }
    }

    public void pollGameSetupCompleted(String requestToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pollGameSetupCompleted_call method_call = new pollGameSetupCompleted_call(requestToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pollGameSetupCompleted_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requestToken;
      public pollGameSetupCompleted_call(String requestToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestToken = requestToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pollGameSetupCompleted", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pollGameSetupCompleted_args args = new pollGameSetupCompleted_args();
        args.setRequestToken(requestToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Match getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pollGameSetupCompleted();
      }
    }

    public void getInitialGameState(String sessionToken, String clientIdentifier, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInitialGameState_call method_call = new getInitialGameState_call(sessionToken, clientIdentifier, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInitialGameState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionToken;
      private String clientIdentifier;
      public getInitialGameState_call(String sessionToken, String clientIdentifier, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionToken = sessionToken;
        this.clientIdentifier = clientIdentifier;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInitialGameState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInitialGameState_args args = new getInitialGameState_args();
        args.setSessionToken(sessionToken);
        args.setClientIdentifier(clientIdentifier);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GameState getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInitialGameState();
      }
    }

    public void awaitStart(String sessionToken, String clientIdentifier, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      awaitStart_call method_call = new awaitStart_call(sessionToken, clientIdentifier, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class awaitStart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionToken;
      private String clientIdentifier;
      public awaitStart_call(String sessionToken, String clientIdentifier, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionToken = sessionToken;
        this.clientIdentifier = clientIdentifier;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("awaitStart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        awaitStart_args args = new awaitStart_args();
        args.setSessionToken(sessionToken);
        args.setClientIdentifier(clientIdentifier);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_awaitStart();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queueForGame", new queueForGame());
      processMap.put("pollGameSetupCompleted", new pollGameSetupCompleted());
      processMap.put("getInitialGameState", new getInitialGameState());
      processMap.put("awaitStart", new awaitStart());
      return processMap;
    }

    public static class queueForGame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queueForGame_args> {
      public queueForGame() {
        super("queueForGame");
      }

      public queueForGame_args getEmptyArgsInstance() {
        return new queueForGame_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queueForGame_result getResult(I iface, queueForGame_args args) throws org.apache.thrift.TException {
        queueForGame_result result = new queueForGame_result();
        result.success = iface.queueForGame();
        return result;
      }
    }

    public static class pollGameSetupCompleted<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pollGameSetupCompleted_args> {
      public pollGameSetupCompleted() {
        super("pollGameSetupCompleted");
      }

      public pollGameSetupCompleted_args getEmptyArgsInstance() {
        return new pollGameSetupCompleted_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pollGameSetupCompleted_result getResult(I iface, pollGameSetupCompleted_args args) throws org.apache.thrift.TException {
        pollGameSetupCompleted_result result = new pollGameSetupCompleted_result();
        result.success = iface.pollGameSetupCompleted(args.requestToken);
        return result;
      }
    }

    public static class getInitialGameState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInitialGameState_args> {
      public getInitialGameState() {
        super("getInitialGameState");
      }

      public getInitialGameState_args getEmptyArgsInstance() {
        return new getInitialGameState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInitialGameState_result getResult(I iface, getInitialGameState_args args) throws org.apache.thrift.TException {
        getInitialGameState_result result = new getInitialGameState_result();
        result.success = iface.getInitialGameState(args.sessionToken, args.clientIdentifier);
        return result;
      }
    }

    public static class awaitStart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, awaitStart_args> {
      public awaitStart() {
        super("awaitStart");
      }

      public awaitStart_args getEmptyArgsInstance() {
        return new awaitStart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public awaitStart_result getResult(I iface, awaitStart_args args) throws org.apache.thrift.TException {
        awaitStart_result result = new awaitStart_result();
        iface.awaitStart(args.sessionToken, args.clientIdentifier);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queueForGame", new queueForGame());
      processMap.put("pollGameSetupCompleted", new pollGameSetupCompleted());
      processMap.put("getInitialGameState", new getInitialGameState());
      processMap.put("awaitStart", new awaitStart());
      return processMap;
    }

    public static class queueForGame<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queueForGame_args, String> {
      public queueForGame() {
        super("queueForGame");
      }

      public queueForGame_args getEmptyArgsInstance() {
        return new queueForGame_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queueForGame_result result = new queueForGame_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queueForGame_result result = new queueForGame_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queueForGame_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queueForGame(resultHandler);
      }
    }

    public static class pollGameSetupCompleted<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pollGameSetupCompleted_args, Match> {
      public pollGameSetupCompleted() {
        super("pollGameSetupCompleted");
      }

      public pollGameSetupCompleted_args getEmptyArgsInstance() {
        return new pollGameSetupCompleted_args();
      }

      public AsyncMethodCallback<Match> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Match>() { 
          public void onComplete(Match o) {
            pollGameSetupCompleted_result result = new pollGameSetupCompleted_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pollGameSetupCompleted_result result = new pollGameSetupCompleted_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pollGameSetupCompleted_args args, org.apache.thrift.async.AsyncMethodCallback<Match> resultHandler) throws TException {
        iface.pollGameSetupCompleted(args.requestToken,resultHandler);
      }
    }

    public static class getInitialGameState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInitialGameState_args, GameState> {
      public getInitialGameState() {
        super("getInitialGameState");
      }

      public getInitialGameState_args getEmptyArgsInstance() {
        return new getInitialGameState_args();
      }

      public AsyncMethodCallback<GameState> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GameState>() { 
          public void onComplete(GameState o) {
            getInitialGameState_result result = new getInitialGameState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getInitialGameState_result result = new getInitialGameState_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getInitialGameState_args args, org.apache.thrift.async.AsyncMethodCallback<GameState> resultHandler) throws TException {
        iface.getInitialGameState(args.sessionToken, args.clientIdentifier,resultHandler);
      }
    }

    public static class awaitStart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, awaitStart_args, Void> {
      public awaitStart() {
        super("awaitStart");
      }

      public awaitStart_args getEmptyArgsInstance() {
        return new awaitStart_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            awaitStart_result result = new awaitStart_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            awaitStart_result result = new awaitStart_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, awaitStart_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.awaitStart(args.sessionToken, args.clientIdentifier,resultHandler);
      }
    }

  }

  public static class queueForGame_args implements org.apache.thrift.TBase<queueForGame_args, queueForGame_args._Fields>, java.io.Serializable, Cloneable, Comparable<queueForGame_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueForGame_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueForGame_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueForGame_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueForGame_args.class, metaDataMap);
    }

    public queueForGame_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueForGame_args(queueForGame_args other) {
    }

    public queueForGame_args deepCopy() {
      return new queueForGame_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueForGame_args)
        return this.equals((queueForGame_args)that);
      return false;
    }

    public boolean equals(queueForGame_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queueForGame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueForGame_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueForGame_argsStandardSchemeFactory implements SchemeFactory {
      public queueForGame_argsStandardScheme getScheme() {
        return new queueForGame_argsStandardScheme();
      }
    }

    private static class queueForGame_argsStandardScheme extends StandardScheme<queueForGame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueForGame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueForGame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueForGame_argsTupleSchemeFactory implements SchemeFactory {
      public queueForGame_argsTupleScheme getScheme() {
        return new queueForGame_argsTupleScheme();
      }
    }

    private static class queueForGame_argsTupleScheme extends TupleScheme<queueForGame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueForGame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueForGame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queueForGame_result implements org.apache.thrift.TBase<queueForGame_result, queueForGame_result._Fields>, java.io.Serializable, Cloneable, Comparable<queueForGame_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueForGame_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueForGame_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueForGame_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueForGame_result.class, metaDataMap);
    }

    public queueForGame_result() {
    }

    public queueForGame_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueForGame_result(queueForGame_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queueForGame_result deepCopy() {
      return new queueForGame_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queueForGame_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueForGame_result)
        return this.equals((queueForGame_result)that);
      return false;
    }

    public boolean equals(queueForGame_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queueForGame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueForGame_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueForGame_resultStandardSchemeFactory implements SchemeFactory {
      public queueForGame_resultStandardScheme getScheme() {
        return new queueForGame_resultStandardScheme();
      }
    }

    private static class queueForGame_resultStandardScheme extends StandardScheme<queueForGame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueForGame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueForGame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueForGame_resultTupleSchemeFactory implements SchemeFactory {
      public queueForGame_resultTupleScheme getScheme() {
        return new queueForGame_resultTupleScheme();
      }
    }

    private static class queueForGame_resultTupleScheme extends TupleScheme<queueForGame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueForGame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueForGame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pollGameSetupCompleted_args implements org.apache.thrift.TBase<pollGameSetupCompleted_args, pollGameSetupCompleted_args._Fields>, java.io.Serializable, Cloneable, Comparable<pollGameSetupCompleted_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pollGameSetupCompleted_args");

    private static final org.apache.thrift.protocol.TField REQUEST_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("requestToken", org.apache.thrift.protocol.TType.STRING, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pollGameSetupCompleted_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pollGameSetupCompleted_argsTupleSchemeFactory());
    }

    public String requestToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_TOKEN((short)-1, "requestToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // REQUEST_TOKEN
            return REQUEST_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("requestToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pollGameSetupCompleted_args.class, metaDataMap);
    }

    public pollGameSetupCompleted_args() {
    }

    public pollGameSetupCompleted_args(
      String requestToken)
    {
      this();
      this.requestToken = requestToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pollGameSetupCompleted_args(pollGameSetupCompleted_args other) {
      if (other.isSetRequestToken()) {
        this.requestToken = other.requestToken;
      }
    }

    public pollGameSetupCompleted_args deepCopy() {
      return new pollGameSetupCompleted_args(this);
    }

    @Override
    public void clear() {
      this.requestToken = null;
    }

    public String getRequestToken() {
      return this.requestToken;
    }

    public pollGameSetupCompleted_args setRequestToken(String requestToken) {
      this.requestToken = requestToken;
      return this;
    }

    public void unsetRequestToken() {
      this.requestToken = null;
    }

    /** Returns true if field requestToken is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestToken() {
      return this.requestToken != null;
    }

    public void setRequestTokenIsSet(boolean value) {
      if (!value) {
        this.requestToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_TOKEN:
        if (value == null) {
          unsetRequestToken();
        } else {
          setRequestToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_TOKEN:
        return getRequestToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_TOKEN:
        return isSetRequestToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pollGameSetupCompleted_args)
        return this.equals((pollGameSetupCompleted_args)that);
      return false;
    }

    public boolean equals(pollGameSetupCompleted_args that) {
      if (that == null)
        return false;

      boolean this_present_requestToken = true && this.isSetRequestToken();
      boolean that_present_requestToken = true && that.isSetRequestToken();
      if (this_present_requestToken || that_present_requestToken) {
        if (!(this_present_requestToken && that_present_requestToken))
          return false;
        if (!this.requestToken.equals(that.requestToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pollGameSetupCompleted_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestToken()).compareTo(other.isSetRequestToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestToken, other.requestToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pollGameSetupCompleted_args(");
      boolean first = true;

      sb.append("requestToken:");
      if (this.requestToken == null) {
        sb.append("null");
      } else {
        sb.append(this.requestToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pollGameSetupCompleted_argsStandardSchemeFactory implements SchemeFactory {
      public pollGameSetupCompleted_argsStandardScheme getScheme() {
        return new pollGameSetupCompleted_argsStandardScheme();
      }
    }

    private static class pollGameSetupCompleted_argsStandardScheme extends StandardScheme<pollGameSetupCompleted_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pollGameSetupCompleted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // REQUEST_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestToken = iprot.readString();
                struct.setRequestTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pollGameSetupCompleted_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestToken != null) {
          oprot.writeFieldBegin(REQUEST_TOKEN_FIELD_DESC);
          oprot.writeString(struct.requestToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pollGameSetupCompleted_argsTupleSchemeFactory implements SchemeFactory {
      public pollGameSetupCompleted_argsTupleScheme getScheme() {
        return new pollGameSetupCompleted_argsTupleScheme();
      }
    }

    private static class pollGameSetupCompleted_argsTupleScheme extends TupleScheme<pollGameSetupCompleted_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pollGameSetupCompleted_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestToken()) {
          oprot.writeString(struct.requestToken);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pollGameSetupCompleted_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestToken = iprot.readString();
          struct.setRequestTokenIsSet(true);
        }
      }
    }

  }

  public static class pollGameSetupCompleted_result implements org.apache.thrift.TBase<pollGameSetupCompleted_result, pollGameSetupCompleted_result._Fields>, java.io.Serializable, Cloneable, Comparable<pollGameSetupCompleted_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pollGameSetupCompleted_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pollGameSetupCompleted_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pollGameSetupCompleted_resultTupleSchemeFactory());
    }

    public Match success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Match.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pollGameSetupCompleted_result.class, metaDataMap);
    }

    public pollGameSetupCompleted_result() {
    }

    public pollGameSetupCompleted_result(
      Match success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pollGameSetupCompleted_result(pollGameSetupCompleted_result other) {
      if (other.isSetSuccess()) {
        this.success = new Match(other.success);
      }
    }

    public pollGameSetupCompleted_result deepCopy() {
      return new pollGameSetupCompleted_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Match getSuccess() {
      return this.success;
    }

    public pollGameSetupCompleted_result setSuccess(Match success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Match)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pollGameSetupCompleted_result)
        return this.equals((pollGameSetupCompleted_result)that);
      return false;
    }

    public boolean equals(pollGameSetupCompleted_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pollGameSetupCompleted_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pollGameSetupCompleted_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pollGameSetupCompleted_resultStandardSchemeFactory implements SchemeFactory {
      public pollGameSetupCompleted_resultStandardScheme getScheme() {
        return new pollGameSetupCompleted_resultStandardScheme();
      }
    }

    private static class pollGameSetupCompleted_resultStandardScheme extends StandardScheme<pollGameSetupCompleted_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pollGameSetupCompleted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Match();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pollGameSetupCompleted_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pollGameSetupCompleted_resultTupleSchemeFactory implements SchemeFactory {
      public pollGameSetupCompleted_resultTupleScheme getScheme() {
        return new pollGameSetupCompleted_resultTupleScheme();
      }
    }

    private static class pollGameSetupCompleted_resultTupleScheme extends TupleScheme<pollGameSetupCompleted_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pollGameSetupCompleted_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pollGameSetupCompleted_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Match();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getInitialGameState_args implements org.apache.thrift.TBase<getInitialGameState_args, getInitialGameState_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInitialGameState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInitialGameState_args");

    private static final org.apache.thrift.protocol.TField SESSION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionToken", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField CLIENT_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIdentifier", org.apache.thrift.protocol.TType.STRING, (short)-2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInitialGameState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInitialGameState_argsTupleSchemeFactory());
    }

    public String sessionToken; // required
    public String clientIdentifier; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_TOKEN((short)-1, "sessionToken"),
      CLIENT_IDENTIFIER((short)-2, "clientIdentifier");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // SESSION_TOKEN
            return SESSION_TOKEN;
          case -2: // CLIENT_IDENTIFIER
            return CLIENT_IDENTIFIER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("sessionToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("clientIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInitialGameState_args.class, metaDataMap);
    }

    public getInitialGameState_args() {
    }

    public getInitialGameState_args(
      String sessionToken,
      String clientIdentifier)
    {
      this();
      this.sessionToken = sessionToken;
      this.clientIdentifier = clientIdentifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInitialGameState_args(getInitialGameState_args other) {
      if (other.isSetSessionToken()) {
        this.sessionToken = other.sessionToken;
      }
      if (other.isSetClientIdentifier()) {
        this.clientIdentifier = other.clientIdentifier;
      }
    }

    public getInitialGameState_args deepCopy() {
      return new getInitialGameState_args(this);
    }

    @Override
    public void clear() {
      this.sessionToken = null;
      this.clientIdentifier = null;
    }

    public String getSessionToken() {
      return this.sessionToken;
    }

    public getInitialGameState_args setSessionToken(String sessionToken) {
      this.sessionToken = sessionToken;
      return this;
    }

    public void unsetSessionToken() {
      this.sessionToken = null;
    }

    /** Returns true if field sessionToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionToken() {
      return this.sessionToken != null;
    }

    public void setSessionTokenIsSet(boolean value) {
      if (!value) {
        this.sessionToken = null;
      }
    }

    public String getClientIdentifier() {
      return this.clientIdentifier;
    }

    public getInitialGameState_args setClientIdentifier(String clientIdentifier) {
      this.clientIdentifier = clientIdentifier;
      return this;
    }

    public void unsetClientIdentifier() {
      this.clientIdentifier = null;
    }

    /** Returns true if field clientIdentifier is set (has been assigned a value) and false otherwise */
    public boolean isSetClientIdentifier() {
      return this.clientIdentifier != null;
    }

    public void setClientIdentifierIsSet(boolean value) {
      if (!value) {
        this.clientIdentifier = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_TOKEN:
        if (value == null) {
          unsetSessionToken();
        } else {
          setSessionToken((String)value);
        }
        break;

      case CLIENT_IDENTIFIER:
        if (value == null) {
          unsetClientIdentifier();
        } else {
          setClientIdentifier((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_TOKEN:
        return getSessionToken();

      case CLIENT_IDENTIFIER:
        return getClientIdentifier();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_TOKEN:
        return isSetSessionToken();
      case CLIENT_IDENTIFIER:
        return isSetClientIdentifier();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInitialGameState_args)
        return this.equals((getInitialGameState_args)that);
      return false;
    }

    public boolean equals(getInitialGameState_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionToken = true && this.isSetSessionToken();
      boolean that_present_sessionToken = true && that.isSetSessionToken();
      if (this_present_sessionToken || that_present_sessionToken) {
        if (!(this_present_sessionToken && that_present_sessionToken))
          return false;
        if (!this.sessionToken.equals(that.sessionToken))
          return false;
      }

      boolean this_present_clientIdentifier = true && this.isSetClientIdentifier();
      boolean that_present_clientIdentifier = true && that.isSetClientIdentifier();
      if (this_present_clientIdentifier || that_present_clientIdentifier) {
        if (!(this_present_clientIdentifier && that_present_clientIdentifier))
          return false;
        if (!this.clientIdentifier.equals(that.clientIdentifier))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getInitialGameState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionToken()).compareTo(other.isSetSessionToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionToken, other.sessionToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientIdentifier()).compareTo(other.isSetClientIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientIdentifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIdentifier, other.clientIdentifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInitialGameState_args(");
      boolean first = true;

      sb.append("sessionToken:");
      if (this.sessionToken == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientIdentifier:");
      if (this.clientIdentifier == null) {
        sb.append("null");
      } else {
        sb.append(this.clientIdentifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInitialGameState_argsStandardSchemeFactory implements SchemeFactory {
      public getInitialGameState_argsStandardScheme getScheme() {
        return new getInitialGameState_argsStandardScheme();
      }
    }

    private static class getInitialGameState_argsStandardScheme extends StandardScheme<getInitialGameState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInitialGameState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // SESSION_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionToken = iprot.readString();
                struct.setSessionTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // CLIENT_IDENTIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientIdentifier = iprot.readString();
                struct.setClientIdentifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInitialGameState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientIdentifier != null) {
          oprot.writeFieldBegin(CLIENT_IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.clientIdentifier);
          oprot.writeFieldEnd();
        }
        if (struct.sessionToken != null) {
          oprot.writeFieldBegin(SESSION_TOKEN_FIELD_DESC);
          oprot.writeString(struct.sessionToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInitialGameState_argsTupleSchemeFactory implements SchemeFactory {
      public getInitialGameState_argsTupleScheme getScheme() {
        return new getInitialGameState_argsTupleScheme();
      }
    }

    private static class getInitialGameState_argsTupleScheme extends TupleScheme<getInitialGameState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInitialGameState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionToken()) {
          optionals.set(0);
        }
        if (struct.isSetClientIdentifier()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionToken()) {
          oprot.writeString(struct.sessionToken);
        }
        if (struct.isSetClientIdentifier()) {
          oprot.writeString(struct.clientIdentifier);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInitialGameState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionToken = iprot.readString();
          struct.setSessionTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientIdentifier = iprot.readString();
          struct.setClientIdentifierIsSet(true);
        }
      }
    }

  }

  public static class getInitialGameState_result implements org.apache.thrift.TBase<getInitialGameState_result, getInitialGameState_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInitialGameState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInitialGameState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInitialGameState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInitialGameState_resultTupleSchemeFactory());
    }

    public GameState success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInitialGameState_result.class, metaDataMap);
    }

    public getInitialGameState_result() {
    }

    public getInitialGameState_result(
      GameState success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInitialGameState_result(getInitialGameState_result other) {
      if (other.isSetSuccess()) {
        this.success = new GameState(other.success);
      }
    }

    public getInitialGameState_result deepCopy() {
      return new getInitialGameState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GameState getSuccess() {
      return this.success;
    }

    public getInitialGameState_result setSuccess(GameState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GameState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInitialGameState_result)
        return this.equals((getInitialGameState_result)that);
      return false;
    }

    public boolean equals(getInitialGameState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getInitialGameState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInitialGameState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInitialGameState_resultStandardSchemeFactory implements SchemeFactory {
      public getInitialGameState_resultStandardScheme getScheme() {
        return new getInitialGameState_resultStandardScheme();
      }
    }

    private static class getInitialGameState_resultStandardScheme extends StandardScheme<getInitialGameState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInitialGameState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GameState();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInitialGameState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInitialGameState_resultTupleSchemeFactory implements SchemeFactory {
      public getInitialGameState_resultTupleScheme getScheme() {
        return new getInitialGameState_resultTupleScheme();
      }
    }

    private static class getInitialGameState_resultTupleScheme extends TupleScheme<getInitialGameState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInitialGameState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInitialGameState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GameState();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class awaitStart_args implements org.apache.thrift.TBase<awaitStart_args, awaitStart_args._Fields>, java.io.Serializable, Cloneable, Comparable<awaitStart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("awaitStart_args");

    private static final org.apache.thrift.protocol.TField SESSION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionToken", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField CLIENT_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIdentifier", org.apache.thrift.protocol.TType.STRING, (short)-2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new awaitStart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new awaitStart_argsTupleSchemeFactory());
    }

    public String sessionToken; // required
    public String clientIdentifier; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_TOKEN((short)-1, "sessionToken"),
      CLIENT_IDENTIFIER((short)-2, "clientIdentifier");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // SESSION_TOKEN
            return SESSION_TOKEN;
          case -2: // CLIENT_IDENTIFIER
            return CLIENT_IDENTIFIER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("sessionToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("clientIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(awaitStart_args.class, metaDataMap);
    }

    public awaitStart_args() {
    }

    public awaitStart_args(
      String sessionToken,
      String clientIdentifier)
    {
      this();
      this.sessionToken = sessionToken;
      this.clientIdentifier = clientIdentifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public awaitStart_args(awaitStart_args other) {
      if (other.isSetSessionToken()) {
        this.sessionToken = other.sessionToken;
      }
      if (other.isSetClientIdentifier()) {
        this.clientIdentifier = other.clientIdentifier;
      }
    }

    public awaitStart_args deepCopy() {
      return new awaitStart_args(this);
    }

    @Override
    public void clear() {
      this.sessionToken = null;
      this.clientIdentifier = null;
    }

    public String getSessionToken() {
      return this.sessionToken;
    }

    public awaitStart_args setSessionToken(String sessionToken) {
      this.sessionToken = sessionToken;
      return this;
    }

    public void unsetSessionToken() {
      this.sessionToken = null;
    }

    /** Returns true if field sessionToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionToken() {
      return this.sessionToken != null;
    }

    public void setSessionTokenIsSet(boolean value) {
      if (!value) {
        this.sessionToken = null;
      }
    }

    public String getClientIdentifier() {
      return this.clientIdentifier;
    }

    public awaitStart_args setClientIdentifier(String clientIdentifier) {
      this.clientIdentifier = clientIdentifier;
      return this;
    }

    public void unsetClientIdentifier() {
      this.clientIdentifier = null;
    }

    /** Returns true if field clientIdentifier is set (has been assigned a value) and false otherwise */
    public boolean isSetClientIdentifier() {
      return this.clientIdentifier != null;
    }

    public void setClientIdentifierIsSet(boolean value) {
      if (!value) {
        this.clientIdentifier = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_TOKEN:
        if (value == null) {
          unsetSessionToken();
        } else {
          setSessionToken((String)value);
        }
        break;

      case CLIENT_IDENTIFIER:
        if (value == null) {
          unsetClientIdentifier();
        } else {
          setClientIdentifier((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_TOKEN:
        return getSessionToken();

      case CLIENT_IDENTIFIER:
        return getClientIdentifier();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_TOKEN:
        return isSetSessionToken();
      case CLIENT_IDENTIFIER:
        return isSetClientIdentifier();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof awaitStart_args)
        return this.equals((awaitStart_args)that);
      return false;
    }

    public boolean equals(awaitStart_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionToken = true && this.isSetSessionToken();
      boolean that_present_sessionToken = true && that.isSetSessionToken();
      if (this_present_sessionToken || that_present_sessionToken) {
        if (!(this_present_sessionToken && that_present_sessionToken))
          return false;
        if (!this.sessionToken.equals(that.sessionToken))
          return false;
      }

      boolean this_present_clientIdentifier = true && this.isSetClientIdentifier();
      boolean that_present_clientIdentifier = true && that.isSetClientIdentifier();
      if (this_present_clientIdentifier || that_present_clientIdentifier) {
        if (!(this_present_clientIdentifier && that_present_clientIdentifier))
          return false;
        if (!this.clientIdentifier.equals(that.clientIdentifier))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(awaitStart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionToken()).compareTo(other.isSetSessionToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionToken, other.sessionToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientIdentifier()).compareTo(other.isSetClientIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientIdentifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIdentifier, other.clientIdentifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("awaitStart_args(");
      boolean first = true;

      sb.append("sessionToken:");
      if (this.sessionToken == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientIdentifier:");
      if (this.clientIdentifier == null) {
        sb.append("null");
      } else {
        sb.append(this.clientIdentifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class awaitStart_argsStandardSchemeFactory implements SchemeFactory {
      public awaitStart_argsStandardScheme getScheme() {
        return new awaitStart_argsStandardScheme();
      }
    }

    private static class awaitStart_argsStandardScheme extends StandardScheme<awaitStart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, awaitStart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // SESSION_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionToken = iprot.readString();
                struct.setSessionTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // CLIENT_IDENTIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientIdentifier = iprot.readString();
                struct.setClientIdentifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, awaitStart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientIdentifier != null) {
          oprot.writeFieldBegin(CLIENT_IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.clientIdentifier);
          oprot.writeFieldEnd();
        }
        if (struct.sessionToken != null) {
          oprot.writeFieldBegin(SESSION_TOKEN_FIELD_DESC);
          oprot.writeString(struct.sessionToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class awaitStart_argsTupleSchemeFactory implements SchemeFactory {
      public awaitStart_argsTupleScheme getScheme() {
        return new awaitStart_argsTupleScheme();
      }
    }

    private static class awaitStart_argsTupleScheme extends TupleScheme<awaitStart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, awaitStart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionToken()) {
          optionals.set(0);
        }
        if (struct.isSetClientIdentifier()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionToken()) {
          oprot.writeString(struct.sessionToken);
        }
        if (struct.isSetClientIdentifier()) {
          oprot.writeString(struct.clientIdentifier);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, awaitStart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionToken = iprot.readString();
          struct.setSessionTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientIdentifier = iprot.readString();
          struct.setClientIdentifierIsSet(true);
        }
      }
    }

  }

  public static class awaitStart_result implements org.apache.thrift.TBase<awaitStart_result, awaitStart_result._Fields>, java.io.Serializable, Cloneable, Comparable<awaitStart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("awaitStart_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new awaitStart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new awaitStart_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(awaitStart_result.class, metaDataMap);
    }

    public awaitStart_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public awaitStart_result(awaitStart_result other) {
    }

    public awaitStart_result deepCopy() {
      return new awaitStart_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof awaitStart_result)
        return this.equals((awaitStart_result)that);
      return false;
    }

    public boolean equals(awaitStart_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(awaitStart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("awaitStart_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class awaitStart_resultStandardSchemeFactory implements SchemeFactory {
      public awaitStart_resultStandardScheme getScheme() {
        return new awaitStart_resultStandardScheme();
      }
    }

    private static class awaitStart_resultStandardScheme extends StandardScheme<awaitStart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, awaitStart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, awaitStart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class awaitStart_resultTupleSchemeFactory implements SchemeFactory {
      public awaitStart_resultTupleScheme getScheme() {
        return new awaitStart_resultTupleScheme();
      }
    }

    private static class awaitStart_resultTupleScheme extends TupleScheme<awaitStart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, awaitStart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, awaitStart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
